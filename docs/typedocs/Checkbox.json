{
	"id": 119,
	"name": "CodeLeap web lib",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 120,
			"name": "CheckboxProps",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "* Checkbox"
					}
				]
			},
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Pick"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "packages/web/src/components/InputBase/types.ts",
									"qualifiedName": "InputBaseProps"
								},
								"name": "InputBaseProps",
								"package": "@codeleap/web"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "debugName"
									},
									{
										"type": "literal",
										"value": "disabled"
									},
									{
										"type": "literal",
										"value": "label"
									}
								]
							}
						],
						"name": "Pick",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "packages/web/src/types/utility.ts",
							"qualifiedName": "ComponentCommonProps"
						},
						"name": "ComponentCommonProps",
						"package": "@codeleap/web"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 121,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 130,
									"name": "checkIcon",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "prop"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "packages/common/dist/styles/types.d.ts",
											"qualifiedName": "IconPlaceholder"
										},
										"name": "IconPlaceholder",
										"package": "@codeleap/common"
									}
								},
								{
									"id": 129,
									"name": "checkboxOnLeft",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "prop"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 124,
									"name": "onValueChange",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 125,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 126,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "prop"
															}
														]
													},
													"parameters": [
														{
															"id": 127,
															"name": "value",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 128,
									"name": "style",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "style"
										},
										"objectType": {
											"type": "reference",
											"target": {
												"sourceFileName": "packages/common/dist/types/utility.d.ts",
												"qualifiedName": "PropsOf"
											},
											"typeArguments": [
												{
													"type": "query",
													"queryType": {
														"type": "reference",
														"target": {
															"sourceFileName": "packages/web/src/components/View/index.tsx",
															"qualifiedName": "View"
														},
														"name": "View",
														"package": "@codeleap/web"
													}
												}
											],
											"name": "PropsOf",
											"package": "@codeleap/common"
										}
									}
								},
								{
									"id": 122,
									"name": "styles",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "packages/common/dist/types/utility.d.ts",
											"qualifiedName": "StylesOf"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "packages/web/src/components/Checkbox/styles.ts",
													"qualifiedName": "CheckboxComposition"
												},
												"name": "CheckboxComposition",
												"package": "@codeleap/web"
											}
										],
										"name": "StylesOf",
										"package": "@codeleap/common"
									}
								},
								{
									"id": 123,
									"name": "value",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "prop"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										130,
										129,
										124,
										128,
										122,
										123
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "packages/common/dist/types/utility.d.ts",
							"qualifiedName": "ComponentVariants"
						},
						"typeArguments": [
							{
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": {
										"sourceFileName": "packages/web/src/components/Checkbox/styles.ts",
										"qualifiedName": "CheckboxPresets"
									},
									"name": "CheckboxPresets",
									"package": "@codeleap/web"
								}
							}
						],
						"name": "ComponentVariants",
						"package": "@codeleap/common"
					}
				]
			}
		}
	],
	"groups": [
		{
			"title": "Type Aliases",
			"children": [
				120
			]
		}
	],
	"packageName": "@codeleap/web",
	"readme": [
		{
			"kind": "text",
			"text": "# Codeleap Libraries\n\nThis repository contains component and utility abstractions to make our work on projects easier, as well as templates for getting started with new projects or for reference on how to use a certain feature.\n\nRead the docs at [docs.codeleap.co.uk](http://docs.codeleap.co.uk/)\n\n## Libraries\n\n- @codeleap/common: Includes the styling system, redux, api, form and permission APIs as well as some miscellaneous utilities.\n- @codeleap/mobile: Components for react-native, along with some systems specific to mobile platforms such as the permission and OSAlert modules.\n- @codeleap/web: Components for websites, with various APIs for DOM manipulation and simplifying the process of making a Gatsby website.\n\n## Templates and examples\n\nBoth the web and mobile templates include examples of API usage for their respective library and the @codeleap/common package.\n\n## Contributing\n\nThis repository utilizes "
		},
		{
			"kind": "code",
			"text": "`yarn workspaces`"
		},
		{
			"kind": "text",
			"text": " along with "
		},
		{
			"kind": "code",
			"text": "`turborepo`"
		},
		{
			"kind": "text",
			"text": " for package/build management. The templates are tracked through git submodules, to allow simple cloning for new projects.\n\n### Setup\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\ngit clone https://github.com/codeleap-uk/internal-libs-monorepo\n\ncd internal-libs-monorepo\n\n# Pulls git submodules for templates\ngit submodule update --init --recursive\n\n# Must use node 18+\nnvm use 18.15.0\n\n# Install dependencies\nyarn\n\n# Builds local versions of libraries\nyarn build\n\n# To build the app for android. Substitute android for 'ios' to run on apple devices\nyarn mobile android\n# To run the mobile template\nyarn mobile dev\n\n# To run the web template\nyarn web dev\n```"
		},
		{
			"kind": "text",
			"text": "\n\nChanges made to the packages must be rebuilt to take effect inside template apps. It's recommended to configure the [Run on Save](https://marketplace.visualstudio.com/items?itemName=pucelle.run-on-save) extension for a smoother development experience. You can also just run "
		},
		{
			"kind": "code",
			"text": "`yarn build`"
		},
		{
			"kind": "text",
			"text": " again.\n\n### Updating the documentation\n\nAll pages for the docs website use mdx, a mix between markdown and react's jsx. The articles themselves are located at "
		},
		{
			"kind": "code",
			"text": "`apps/docs/src/articles`"
		},
		{
			"kind": "text",
			"text": ". The frontmatter at the start of each file defines it's metadata, such as which module it belongs to (common,mobile,web), the path it will have under the respective module's url, and the title among other things such as the category (used for sidebar).\n\n"
		},
		{
			"kind": "code",
			"text": "```mdx\n---\npath: 'permissions/solution'\ntitle: 'Our current solution'\ndate: '2022-06-30'\ncategory: Permissions\nmodule: mobile\nindex: 1\n---\n```"
		},
		{
			"kind": "text",
			"text": "\n\n## Commit standard\n\nThis repository uses [cz-customizable](https://github.com/leoforfree/cz-customizable), an alternative to [Commitizen](https://github.com/commitizen/cz-cli) that allows for customization of the prompts for making a commit.\n\n> It's advised to commit using a command line instead of a GUI tool such as VSCode's git feature or Github desktop, to ensure commit's follow the standard and are correctly displayed in changelogs for releases\n\nThere is no simple way to make git hooks interactive across windows and unix, so use "
		},
		{
			"kind": "code",
			"text": "`yarn commit`"
		},
		{
			"kind": "text",
			"text": " instead of "
		},
		{
			"kind": "code",
			"text": "`git commit`"
		},
		{
			"kind": "text",
			"text": ". \n\nThese conventions are established to make tracking of changes to our libraries easier through changelogs.\n### Submitting your changes\n\nPlease open a PR with an appropiatly named branch in the format "
		},
		{
			"kind": "code",
			"text": "`{scope}/{feature}`"
		},
		{
			"kind": "text",
			"text": ", where:\n\n- "
		},
		{
			"kind": "code",
			"text": "`scope`"
		},
		{
			"kind": "text",
			"text": " is one of:\n  - mobile: for changes to the mobile package or template\n  - web: for changes to the web package or template\n  - common: for changes to the common package\n- "
		},
		{
			"kind": "code",
			"text": "`feature`"
		},
		{
			"kind": "text",
			"text": " is a simplified or abbreviated description of your changes\n\nPRs will be integrated/approved with the following criteria in mind:\n\n- What problem does the change solve?\n- How difficult is it to integrate in existing apps?\n- Does it provide both good UX and DX?\n\nPlease include this in the description of the PR to make discussion easier."
		}
	],
	"symbolIdMap": {
		"119": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": ""
		},
		"120": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "CheckboxProps"
		},
		"121": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type"
		},
		"122": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type.styles"
		},
		"123": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type.value"
		},
		"124": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type.onValueChange"
		},
		"125": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type"
		},
		"126": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type"
		},
		"127": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "value"
		},
		"128": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type.style"
		},
		"129": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type.checkboxOnLeft"
		},
		"130": {
			"sourceFileName": "packages/web/src/components/Checkbox/index.tsx",
			"qualifiedName": "__type.checkIcon"
		}
	}
}